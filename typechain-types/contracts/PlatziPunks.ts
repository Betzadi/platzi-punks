/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PlatziPunksInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "deterministicPseudoRandomDNA"
      | "getAccessoriesType"
      | "getApproved"
      | "getClotheColor"
      | "getClotheType"
      | "getEyeBrowType"
      | "getEyeType"
      | "getFacialHairColor"
      | "getFacialHairType"
      | "getGraphicType"
      | "getHairColor"
      | "getHatColor"
      | "getMouthType"
      | "getSkinColor"
      | "getTopType"
      | "imageByDNA"
      | "isApprovedForAll"
      | "maxSupply"
      | "mint"
      | "name"
      | "ownerOf"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenDNA"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Approval" | "ApprovalForAll" | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deterministicPseudoRandomDNA",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccessoriesType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClotheColor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClotheType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEyeBrowType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEyeType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFacialHairColor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFacialHairType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGraphicType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHairColor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHatColor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMouthType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSkinColor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "imageByDNA",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(functionFragment: "mint", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDNA",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deterministicPseudoRandomDNA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccessoriesType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClotheColor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClotheType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEyeBrowType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEyeType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFacialHairColor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFacialHairType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGraphicType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHairColor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHatColor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMouthType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSkinColor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTopType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "imageByDNA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenDNA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PlatziPunks extends BaseContract {
  connect(runner?: ContractRunner | null): PlatziPunks;
  waitForDeployment(): Promise<this>;

  interface: PlatziPunksInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  deterministicPseudoRandomDNA: TypedContractMethod<
    [_tokenId: BigNumberish, _minter: AddressLike],
    [bigint],
    "view"
  >;

  getAccessoriesType: TypedContractMethod<
    [_dna: BigNumberish],
    [string],
    "view"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getClotheColor: TypedContractMethod<[_dna: BigNumberish], [string], "view">;

  getClotheType: TypedContractMethod<[_dna: BigNumberish], [string], "view">;

  getEyeBrowType: TypedContractMethod<[_dna: BigNumberish], [string], "view">;

  getEyeType: TypedContractMethod<[_dna: BigNumberish], [string], "view">;

  getFacialHairColor: TypedContractMethod<
    [_dna: BigNumberish],
    [string],
    "view"
  >;

  getFacialHairType: TypedContractMethod<
    [_dna: BigNumberish],
    [string],
    "view"
  >;

  getGraphicType: TypedContractMethod<[_dna: BigNumberish], [string], "view">;

  getHairColor: TypedContractMethod<[_dna: BigNumberish], [string], "view">;

  getHatColor: TypedContractMethod<[_dna: BigNumberish], [string], "view">;

  getMouthType: TypedContractMethod<[_dna: BigNumberish], [string], "view">;

  getSkinColor: TypedContractMethod<[_dna: BigNumberish], [string], "view">;

  getTopType: TypedContractMethod<[_dna: BigNumberish], [string], "view">;

  imageByDNA: TypedContractMethod<[_dna: BigNumberish], [string], "view">;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  maxSupply: TypedContractMethod<[], [bigint], "view">;

  mint: TypedContractMethod<[], [void], "nonpayable">;

  name: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenByIndex: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  tokenDNA: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "deterministicPseudoRandomDNA"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _minter: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccessoriesType"
  ): TypedContractMethod<[_dna: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getClotheColor"
  ): TypedContractMethod<[_dna: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getClotheType"
  ): TypedContractMethod<[_dna: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getEyeBrowType"
  ): TypedContractMethod<[_dna: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getEyeType"
  ): TypedContractMethod<[_dna: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getFacialHairColor"
  ): TypedContractMethod<[_dna: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getFacialHairType"
  ): TypedContractMethod<[_dna: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getGraphicType"
  ): TypedContractMethod<[_dna: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getHairColor"
  ): TypedContractMethod<[_dna: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getHatColor"
  ): TypedContractMethod<[_dna: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getMouthType"
  ): TypedContractMethod<[_dna: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getSkinColor"
  ): TypedContractMethod<[_dna: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTopType"
  ): TypedContractMethod<[_dna: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "imageByDNA"
  ): TypedContractMethod<[_dna: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenDNA"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
